// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  emailVerificationHash: (
    where?: EmailVerificationHashWhereInput
  ) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  emailVerificationHash: (
    where: EmailVerificationHashWhereUniqueInput
  ) => EmailVerificationHashNullablePromise;
  emailVerificationHashes: (args?: {
    where?: EmailVerificationHashWhereInput;
    orderBy?: EmailVerificationHashOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EmailVerificationHash>;
  emailVerificationHashesConnection: (args?: {
    where?: EmailVerificationHashWhereInput;
    orderBy?: EmailVerificationHashOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EmailVerificationHashConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEmailVerificationHash: (
    data: EmailVerificationHashCreateInput
  ) => EmailVerificationHashPromise;
  updateEmailVerificationHash: (args: {
    data: EmailVerificationHashUpdateInput;
    where: EmailVerificationHashWhereUniqueInput;
  }) => EmailVerificationHashPromise;
  updateManyEmailVerificationHashes: (args: {
    data: EmailVerificationHashUpdateManyMutationInput;
    where?: EmailVerificationHashWhereInput;
  }) => BatchPayloadPromise;
  upsertEmailVerificationHash: (args: {
    where: EmailVerificationHashWhereUniqueInput;
    create: EmailVerificationHashCreateInput;
    update: EmailVerificationHashUpdateInput;
  }) => EmailVerificationHashPromise;
  deleteEmailVerificationHash: (
    where: EmailVerificationHashWhereUniqueInput
  ) => EmailVerificationHashPromise;
  deleteManyEmailVerificationHashes: (
    where?: EmailVerificationHashWhereInput
  ) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  emailVerificationHash: (
    where?: EmailVerificationHashSubscriptionWhereInput
  ) => EmailVerificationHashSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type EmailVerificationHashOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "hash_ASC"
  | "hash_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "companyName_ASC"
  | "companyName_DESC"
  | "description_ASC"
  | "description_DESC"
  | "location_ASC"
  | "location_DESC"
  | "salary_ASC"
  | "salary_DESC"
  | "currency_ASC"
  | "currency_DESC"
  | "category_ASC"
  | "category_DESC"
  | "type_ASC"
  | "type_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "profilePicture_ASC"
  | "profilePicture_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "country_ASC"
  | "country_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "headline_ASC"
  | "headline_DESC"
  | "about_ASC"
  | "about_DESC"
  | "active_ASC"
  | "active_DESC"
  | "yearsOfExperience_ASC"
  | "yearsOfExperience_DESC"
  | "degree_ASC"
  | "degree_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type EmailVerificationHashWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  hash?: Maybe<String>;
}>;

export interface EmailVerificationHashWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  hash?: Maybe<String>;
  hash_not?: Maybe<String>;
  hash_in?: Maybe<String[] | String>;
  hash_not_in?: Maybe<String[] | String>;
  hash_lt?: Maybe<String>;
  hash_lte?: Maybe<String>;
  hash_gt?: Maybe<String>;
  hash_gte?: Maybe<String>;
  hash_contains?: Maybe<String>;
  hash_not_contains?: Maybe<String>;
  hash_starts_with?: Maybe<String>;
  hash_not_starts_with?: Maybe<String>;
  hash_ends_with?: Maybe<String>;
  hash_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    EmailVerificationHashWhereInput[] | EmailVerificationHashWhereInput
  >;
  OR?: Maybe<
    EmailVerificationHashWhereInput[] | EmailVerificationHashWhereInput
  >;
  NOT?: Maybe<
    EmailVerificationHashWhereInput[] | EmailVerificationHashWhereInput
  >;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  companyName?: Maybe<String>;
  companyName_not?: Maybe<String>;
  companyName_in?: Maybe<String[] | String>;
  companyName_not_in?: Maybe<String[] | String>;
  companyName_lt?: Maybe<String>;
  companyName_lte?: Maybe<String>;
  companyName_gt?: Maybe<String>;
  companyName_gte?: Maybe<String>;
  companyName_contains?: Maybe<String>;
  companyName_not_contains?: Maybe<String>;
  companyName_starts_with?: Maybe<String>;
  companyName_not_starts_with?: Maybe<String>;
  companyName_ends_with?: Maybe<String>;
  companyName_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  salary?: Maybe<Int>;
  salary_not?: Maybe<Int>;
  salary_in?: Maybe<Int[] | Int>;
  salary_not_in?: Maybe<Int[] | Int>;
  salary_lt?: Maybe<Int>;
  salary_lte?: Maybe<Int>;
  salary_gt?: Maybe<Int>;
  salary_gte?: Maybe<Int>;
  currency?: Maybe<String>;
  currency_not?: Maybe<String>;
  currency_in?: Maybe<String[] | String>;
  currency_not_in?: Maybe<String[] | String>;
  currency_lt?: Maybe<String>;
  currency_lte?: Maybe<String>;
  currency_gt?: Maybe<String>;
  currency_gte?: Maybe<String>;
  currency_contains?: Maybe<String>;
  currency_not_contains?: Maybe<String>;
  currency_starts_with?: Maybe<String>;
  currency_not_starts_with?: Maybe<String>;
  currency_ends_with?: Maybe<String>;
  currency_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  profilePicture?: Maybe<String>;
  profilePicture_not?: Maybe<String>;
  profilePicture_in?: Maybe<String[] | String>;
  profilePicture_not_in?: Maybe<String[] | String>;
  profilePicture_lt?: Maybe<String>;
  profilePicture_lte?: Maybe<String>;
  profilePicture_gt?: Maybe<String>;
  profilePicture_gte?: Maybe<String>;
  profilePicture_contains?: Maybe<String>;
  profilePicture_not_contains?: Maybe<String>;
  profilePicture_starts_with?: Maybe<String>;
  profilePicture_not_starts_with?: Maybe<String>;
  profilePicture_ends_with?: Maybe<String>;
  profilePicture_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  headline?: Maybe<String>;
  headline_not?: Maybe<String>;
  headline_in?: Maybe<String[] | String>;
  headline_not_in?: Maybe<String[] | String>;
  headline_lt?: Maybe<String>;
  headline_lte?: Maybe<String>;
  headline_gt?: Maybe<String>;
  headline_gte?: Maybe<String>;
  headline_contains?: Maybe<String>;
  headline_not_contains?: Maybe<String>;
  headline_starts_with?: Maybe<String>;
  headline_not_starts_with?: Maybe<String>;
  headline_ends_with?: Maybe<String>;
  headline_not_ends_with?: Maybe<String>;
  about?: Maybe<String>;
  about_not?: Maybe<String>;
  about_in?: Maybe<String[] | String>;
  about_not_in?: Maybe<String[] | String>;
  about_lt?: Maybe<String>;
  about_lte?: Maybe<String>;
  about_gt?: Maybe<String>;
  about_gte?: Maybe<String>;
  about_contains?: Maybe<String>;
  about_not_contains?: Maybe<String>;
  about_starts_with?: Maybe<String>;
  about_not_starts_with?: Maybe<String>;
  about_ends_with?: Maybe<String>;
  about_not_ends_with?: Maybe<String>;
  active?: Maybe<Boolean>;
  active_not?: Maybe<Boolean>;
  yearsOfExperience?: Maybe<String>;
  yearsOfExperience_not?: Maybe<String>;
  yearsOfExperience_in?: Maybe<String[] | String>;
  yearsOfExperience_not_in?: Maybe<String[] | String>;
  yearsOfExperience_lt?: Maybe<String>;
  yearsOfExperience_lte?: Maybe<String>;
  yearsOfExperience_gt?: Maybe<String>;
  yearsOfExperience_gte?: Maybe<String>;
  yearsOfExperience_contains?: Maybe<String>;
  yearsOfExperience_not_contains?: Maybe<String>;
  yearsOfExperience_starts_with?: Maybe<String>;
  yearsOfExperience_not_starts_with?: Maybe<String>;
  yearsOfExperience_ends_with?: Maybe<String>;
  yearsOfExperience_not_ends_with?: Maybe<String>;
  degree?: Maybe<String>;
  degree_not?: Maybe<String>;
  degree_in?: Maybe<String[] | String>;
  degree_not_in?: Maybe<String[] | String>;
  degree_lt?: Maybe<String>;
  degree_lte?: Maybe<String>;
  degree_gt?: Maybe<String>;
  degree_gte?: Maybe<String>;
  degree_contains?: Maybe<String>;
  degree_not_contains?: Maybe<String>;
  degree_starts_with?: Maybe<String>;
  degree_not_starts_with?: Maybe<String>;
  degree_ends_with?: Maybe<String>;
  degree_not_ends_with?: Maybe<String>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface EmailVerificationHashCreateInput {
  id?: Maybe<ID_Input>;
  hash: String;
}

export interface EmailVerificationHashUpdateInput {
  hash?: Maybe<String>;
}

export interface EmailVerificationHashUpdateManyMutationInput {
  hash?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  companyName: String;
  description: String;
  location: String;
  salary: Int;
  currency: String;
  category: String;
  skills?: Maybe<PostCreateskillsInput>;
  type: String;
  author: UserCreateOneWithoutPostsInput;
}

export interface PostCreateskillsInput {
  set?: Maybe<String[] | String>;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  profilePicture?: Maybe<String>;
  lastName: String;
  email: String;
  password?: Maybe<String>;
  country?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  headline?: Maybe<String>;
  skills?: Maybe<UserCreateskillsInput>;
  about?: Maybe<String>;
  active?: Maybe<Boolean>;
  yearsOfExperience?: Maybe<String>;
  degree?: Maybe<String>;
}

export interface UserCreateskillsInput {
  set?: Maybe<String[] | String>;
}

export interface PostUpdateInput {
  title?: Maybe<String>;
  companyName?: Maybe<String>;
  description?: Maybe<String>;
  location?: Maybe<String>;
  salary?: Maybe<Int>;
  currency?: Maybe<String>;
  category?: Maybe<String>;
  skills?: Maybe<PostUpdateskillsInput>;
  type?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
}

export interface PostUpdateskillsInput {
  set?: Maybe<String[] | String>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  firstName?: Maybe<String>;
  profilePicture?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  country?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  headline?: Maybe<String>;
  skills?: Maybe<UserUpdateskillsInput>;
  about?: Maybe<String>;
  active?: Maybe<Boolean>;
  yearsOfExperience?: Maybe<String>;
  degree?: Maybe<String>;
}

export interface UserUpdateskillsInput {
  set?: Maybe<String[] | String>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpdateManyMutationInput {
  title?: Maybe<String>;
  companyName?: Maybe<String>;
  description?: Maybe<String>;
  location?: Maybe<String>;
  salary?: Maybe<Int>;
  currency?: Maybe<String>;
  category?: Maybe<String>;
  skills?: Maybe<PostUpdateskillsInput>;
  type?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  profilePicture?: Maybe<String>;
  lastName: String;
  email: String;
  password?: Maybe<String>;
  country?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  headline?: Maybe<String>;
  skills?: Maybe<UserCreateskillsInput>;
  about?: Maybe<String>;
  active?: Maybe<Boolean>;
  yearsOfExperience?: Maybe<String>;
  degree?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  title: String;
  companyName: String;
  description: String;
  location: String;
  salary: Int;
  currency: String;
  category: String;
  skills?: Maybe<PostCreateskillsInput>;
  type: String;
}

export interface UserUpdateInput {
  firstName?: Maybe<String>;
  profilePicture?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  country?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  headline?: Maybe<String>;
  skills?: Maybe<UserUpdateskillsInput>;
  about?: Maybe<String>;
  active?: Maybe<Boolean>;
  yearsOfExperience?: Maybe<String>;
  degree?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  title?: Maybe<String>;
  companyName?: Maybe<String>;
  description?: Maybe<String>;
  location?: Maybe<String>;
  salary?: Maybe<Int>;
  currency?: Maybe<String>;
  category?: Maybe<String>;
  skills?: Maybe<PostUpdateskillsInput>;
  type?: Maybe<String>;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  companyName?: Maybe<String>;
  companyName_not?: Maybe<String>;
  companyName_in?: Maybe<String[] | String>;
  companyName_not_in?: Maybe<String[] | String>;
  companyName_lt?: Maybe<String>;
  companyName_lte?: Maybe<String>;
  companyName_gt?: Maybe<String>;
  companyName_gte?: Maybe<String>;
  companyName_contains?: Maybe<String>;
  companyName_not_contains?: Maybe<String>;
  companyName_starts_with?: Maybe<String>;
  companyName_not_starts_with?: Maybe<String>;
  companyName_ends_with?: Maybe<String>;
  companyName_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  salary?: Maybe<Int>;
  salary_not?: Maybe<Int>;
  salary_in?: Maybe<Int[] | Int>;
  salary_not_in?: Maybe<Int[] | Int>;
  salary_lt?: Maybe<Int>;
  salary_lte?: Maybe<Int>;
  salary_gt?: Maybe<Int>;
  salary_gte?: Maybe<Int>;
  currency?: Maybe<String>;
  currency_not?: Maybe<String>;
  currency_in?: Maybe<String[] | String>;
  currency_not_in?: Maybe<String[] | String>;
  currency_lt?: Maybe<String>;
  currency_lte?: Maybe<String>;
  currency_gt?: Maybe<String>;
  currency_gte?: Maybe<String>;
  currency_contains?: Maybe<String>;
  currency_not_contains?: Maybe<String>;
  currency_starts_with?: Maybe<String>;
  currency_not_starts_with?: Maybe<String>;
  currency_ends_with?: Maybe<String>;
  currency_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  title?: Maybe<String>;
  companyName?: Maybe<String>;
  description?: Maybe<String>;
  location?: Maybe<String>;
  salary?: Maybe<Int>;
  currency?: Maybe<String>;
  category?: Maybe<String>;
  skills?: Maybe<PostUpdateskillsInput>;
  type?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  profilePicture?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  country?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  headline?: Maybe<String>;
  skills?: Maybe<UserUpdateskillsInput>;
  about?: Maybe<String>;
  active?: Maybe<Boolean>;
  yearsOfExperience?: Maybe<String>;
  degree?: Maybe<String>;
}

export interface EmailVerificationHashSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EmailVerificationHashWhereInput>;
  AND?: Maybe<
    | EmailVerificationHashSubscriptionWhereInput[]
    | EmailVerificationHashSubscriptionWhereInput
  >;
  OR?: Maybe<
    | EmailVerificationHashSubscriptionWhereInput[]
    | EmailVerificationHashSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | EmailVerificationHashSubscriptionWhereInput[]
    | EmailVerificationHashSubscriptionWhereInput
  >;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface EmailVerificationHash {
  id: ID_Output;
  hash: String;
}

export interface EmailVerificationHashPromise
  extends Promise<EmailVerificationHash>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  hash: () => Promise<String>;
}

export interface EmailVerificationHashSubscription
  extends Promise<AsyncIterator<EmailVerificationHash>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  hash: () => Promise<AsyncIterator<String>>;
}

export interface EmailVerificationHashNullablePromise
  extends Promise<EmailVerificationHash | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  hash: () => Promise<String>;
}

export interface EmailVerificationHashConnection {
  pageInfo: PageInfo;
  edges: EmailVerificationHashEdge[];
}

export interface EmailVerificationHashConnectionPromise
  extends Promise<EmailVerificationHashConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EmailVerificationHashEdge>>() => T;
  aggregate: <T = AggregateEmailVerificationHashPromise>() => T;
}

export interface EmailVerificationHashConnectionSubscription
  extends Promise<AsyncIterator<EmailVerificationHashConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<EmailVerificationHashEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateEmailVerificationHashSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface EmailVerificationHashEdge {
  node: EmailVerificationHash;
  cursor: String;
}

export interface EmailVerificationHashEdgePromise
  extends Promise<EmailVerificationHashEdge>,
    Fragmentable {
  node: <T = EmailVerificationHashPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EmailVerificationHashEdgeSubscription
  extends Promise<AsyncIterator<EmailVerificationHashEdge>>,
    Fragmentable {
  node: <T = EmailVerificationHashSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEmailVerificationHash {
  count: Int;
}

export interface AggregateEmailVerificationHashPromise
  extends Promise<AggregateEmailVerificationHash>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmailVerificationHashSubscription
  extends Promise<AsyncIterator<AggregateEmailVerificationHash>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Post {
  id: ID_Output;
  title: String;
  companyName: String;
  description: String;
  location: String;
  salary: Int;
  currency: String;
  category: String;
  skills: String[];
  type: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  companyName: () => Promise<String>;
  description: () => Promise<String>;
  location: () => Promise<String>;
  salary: () => Promise<Int>;
  currency: () => Promise<String>;
  category: () => Promise<String>;
  skills: () => Promise<String[]>;
  type: () => Promise<String>;
  author: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  companyName: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  salary: () => Promise<AsyncIterator<Int>>;
  currency: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  skills: () => Promise<AsyncIterator<String[]>>;
  type: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  companyName: () => Promise<String>;
  description: () => Promise<String>;
  location: () => Promise<String>;
  salary: () => Promise<Int>;
  currency: () => Promise<String>;
  category: () => Promise<String>;
  skills: () => Promise<String[]>;
  type: () => Promise<String>;
  author: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  firstName: String;
  profilePicture?: String;
  lastName: String;
  email: String;
  password?: String;
  country?: String;
  phoneNumber?: String;
  headline?: String;
  skills: String[];
  about?: String;
  active: Boolean;
  yearsOfExperience?: String;
  degree?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  profilePicture: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  country: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  headline: () => Promise<String>;
  skills: () => Promise<String[]>;
  about: () => Promise<String>;
  active: () => Promise<Boolean>;
  yearsOfExperience: () => Promise<String>;
  degree: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  profilePicture: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  headline: () => Promise<AsyncIterator<String>>;
  skills: () => Promise<AsyncIterator<String[]>>;
  about: () => Promise<AsyncIterator<String>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  yearsOfExperience: () => Promise<AsyncIterator<String>>;
  degree: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  profilePicture: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  country: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  headline: () => Promise<String>;
  skills: () => Promise<String[]>;
  about: () => Promise<String>;
  active: () => Promise<Boolean>;
  yearsOfExperience: () => Promise<String>;
  degree: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EmailVerificationHashSubscriptionPayload {
  mutation: MutationType;
  node: EmailVerificationHash;
  updatedFields: String[];
  previousValues: EmailVerificationHashPreviousValues;
}

export interface EmailVerificationHashSubscriptionPayloadPromise
  extends Promise<EmailVerificationHashSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmailVerificationHashPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmailVerificationHashPreviousValuesPromise>() => T;
}

export interface EmailVerificationHashSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmailVerificationHashSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmailVerificationHashSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmailVerificationHashPreviousValuesSubscription>() => T;
}

export interface EmailVerificationHashPreviousValues {
  id: ID_Output;
  hash: String;
}

export interface EmailVerificationHashPreviousValuesPromise
  extends Promise<EmailVerificationHashPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  hash: () => Promise<String>;
}

export interface EmailVerificationHashPreviousValuesSubscription
  extends Promise<AsyncIterator<EmailVerificationHashPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  hash: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  companyName: String;
  description: String;
  location: String;
  salary: Int;
  currency: String;
  category: String;
  skills: String[];
  type: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  companyName: () => Promise<String>;
  description: () => Promise<String>;
  location: () => Promise<String>;
  salary: () => Promise<Int>;
  currency: () => Promise<String>;
  category: () => Promise<String>;
  skills: () => Promise<String[]>;
  type: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  companyName: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  salary: () => Promise<AsyncIterator<Int>>;
  currency: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  skills: () => Promise<AsyncIterator<String[]>>;
  type: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  profilePicture?: String;
  lastName: String;
  email: String;
  password?: String;
  country?: String;
  phoneNumber?: String;
  headline?: String;
  skills: String[];
  about?: String;
  active: Boolean;
  yearsOfExperience?: String;
  degree?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  profilePicture: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  country: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  headline: () => Promise<String>;
  skills: () => Promise<String[]>;
  about: () => Promise<String>;
  active: () => Promise<Boolean>;
  yearsOfExperience: () => Promise<String>;
  degree: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  profilePicture: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  headline: () => Promise<AsyncIterator<String>>;
  skills: () => Promise<AsyncIterator<String[]>>;
  about: () => Promise<AsyncIterator<String>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  yearsOfExperience: () => Promise<AsyncIterator<String>>;
  degree: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "EmailVerificationHash",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
